name: Build Docker PHP image

on:
  push:
    branches:
      - main  # 在推送到 main 分支时触发
  pull_request:
    branches:
      - main  # 在拉取请求合并到 main 分支时触发
  schedule:
    - cron: '0 17 * * 1' # 每周日17点（UTC），相当于中国时间每周一凌晨1点

jobs:
  build_php_images:
    strategy:
      fail-fast: false  # 让所有任务运行完成，失败不会中断其他任务
      matrix:
        php_version:
          - php72
          - php73
          - php74
          - php80
          - php81
          - php82
          - php83  # 分别测试不同的 PHP 版本
    runs-on: ubuntu-latest
    name: Build and Test ${{ matrix.php_version }} Docker Image

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3  # 检出代码

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3  # 设置 Buildx 环境

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3  # 设置 QEMU 以支持多架构

      - name: Build Docker image for ${{ matrix.php_version }}
        run: docker compose -f compose.sample.yml --env-file .github/workflows/.env build ${{ matrix.php_version }}
        env:
          DOCKER_BUILDKIT: 1
          COMPOSE_DOCKER_CLI_BUILD: 1

      - name: Verify ${{ matrix.php_version }} Docker image
        run: |
          docker compose -f compose.sample.yml --env-file .github/workflows/.env up -d ${{ matrix.php_version }}
          docker compose -f compose.sample.yml exec ${{ matrix.php_version }} php -v  # 验证 PHP 版本
          docker compose -f compose.sample.yml exec ${{ matrix.php_version }} php -m  # 验证 PHP 扩展

  build_service_images:
    strategy:
      fail-fast: false
      matrix:
        service:
          - nginx1.21
          - redis6.2
          - mysql8.0
    runs-on: ubuntu-latest
    name: Build and Test ${{ matrix.service }} Docker Image

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Build Docker image for ${{ matrix.service }}
        run: docker compose -f compose.sample.yml --env-file .github/workflows/.env build ${{ matrix.service }}
        env:
          DOCKER_BUILDKIT: 1
          COMPOSE_DOCKER_CLI_BUILD: 1

      - name: Verify ${{ matrix.service }} Docker image
        run: |
          docker compose -f compose.sample.yml --env-file .github/workflows/.env up -d ${{ matrix.service }}
          # 根据服务类型执行相应的验证步骤
          if [ "${{ matrix.service }}" = "nginx1.21" ]; then
            docker compose -f compose.sample.yml exec ${{ matrix.service }} nginx -v
          elif [ "${{ matrix.service }}" = "redis6.2" ]; then
            docker compose -f compose.sample.yml exec ${{ matrix.service }} redis-server --version
          elif [ "${{ matrix.service }}" = "mysql8.0" ]; then
            docker compose -f compose.sample.yml exec ${{ matrix.service }} mysql --version
          fi

  cleanup:
    runs-on: ubuntu-latest
    needs: [build_php_images, build_service_images]  # 等待所有 build 任务完成
    if: always()  # 确保清理任务在所有任务完成后执行
    steps:
      - name: Stop and delete all containers and networks # 停止并删除所有容器和网络
        run: |
          docker compose -f compose.sample.yml --env-file .github/workflows/.env down

      - name: Delete unused Docker images # 删除未使用的 Docker 镜像
        run: |
          docker image prune -af

      - name: Delete unused Docker data volumes # 删除未使用的 Docker 数据卷
        run: |
          docker volume prune -f

      - name: Delete unused Docker networks # 删除未使用的 Docker 网络
        run: |
          docker network prune -f

      - name: Delete unused Docker system resources # 删除未使用的 Docker 系统资源
        run: |
          docker system prune -af